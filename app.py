import streamlit as st
import os
from src.ia.modelos import ModeloAutismo

def main():
    """
    Interface principal da aplica√ß√£o
    """
    st.set_page_config(
        page_title="Sistema de An√°lise de Autismo",
        page_icon="üß©",
        layout="wide"
    )
    
    # T√≠tulo principal
    st.title("üß© Sistema de An√°lise de Autismo")
    st.markdown("---")
    
    # Menu lateral
    st.sidebar.title("Menu")
    opcao = st.sidebar.selectbox(
        "Selecione uma op√ß√£o:",
        ["P√°gina Inicial", "Treinamento de Modelos", "Realizar Predi√ß√µes"]
    )
    
    # Criar inst√¢ncia do modelo
    modelo = ModeloAutismo()
    
    if opcao == "P√°gina Inicial":
        st.header("Bem-vindo ao Sistema de An√°lise de Autismo")
        st.write("""
        Este sistema utiliza modelos de Machine Learning para auxiliar na an√°lise de dados relacionados ao autismo.
        
        ### Funcionalidades:
        1. **Treinamento de Modelos**: Treine os modelos usando dados sint√©ticos ou reais
        2. **Realizar Predi√ß√µes**: Fa√ßa predi√ß√µes sobre:
           - N√∫mero de consultas necess√°rias
           - Probabilidade de necessitar medicamentos
           - Demanda de servi√ßos por regi√£o
        
        ### Como usar:
        1. Primeiro, acesse "Treinamento de Modelos" para treinar os modelos
        2. Depois, use "Realizar Predi√ß√µes" para fazer an√°lises
        """)
        
    elif opcao == "Treinamento de Modelos":
        st.header("Treinamento dos Modelos")
        
        # Op√ß√µes de treinamento
        metodo_treinamento = st.radio(
            "Selecione o m√©todo de treinamento:",
            ["Dados Sint√©ticos", "Carregar Dados Pr√≥prios"]
        )
        
        if metodo_treinamento == "Dados Sint√©ticos":
            n_samples = st.number_input(
                "N√∫mero de amostras para treinamento:",
                min_value=100,
                max_value=10000,
                value=1000,
                step=100
            )
            
            if st.button("Gerar Dados e Treinar Modelos"):
                try:
                    # Importar fun√ß√£o de gera√ß√£o de dados
                    from src.gerar_base_sintetica import gerar_base_sintetica
                    
                    # Gerar dados
                    with st.spinner("Gerando dados sint√©ticos..."):
                        df = gerar_base_sintetica(n_samples)
                        st.success(f"Dados gerados com sucesso! Shape: {df.shape}")
                    
                    # Mostrar distribui√ß√£o dos dados
                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("Distribui√ß√£o de Tratamentos")
                        st.write(df['Tratamento'].value_counts())
                    with col2:
                        st.subheader("Distribui√ß√£o por Regi√£o")
                        st.write(df['Regiao'].value_counts())
                    
                    # Treinar modelos
                    with st.spinner("Treinando modelos..."):
                        modelo.treinar_modelos(df)
                        st.success("‚úÖ Modelos treinados e salvos com sucesso!")
                    
                except Exception as e:
                    st.error(f"‚ùå Erro durante o treinamento: {str(e)}")
        
        else:
            st.write("Funcionalidade em desenvolvimento...")
            
    else:  # Realizar Predi√ß√µes
        if not modelo.modelos_existem():
            st.warning("‚ö†Ô∏è Modelos n√£o encontrados! Por favor, treine os modelos primeiro.")
            if st.button("Treinar Modelos Agora"):
                try:
                    from src.gerar_base_sintetica import gerar_base_sintetica
                    with st.spinner("Gerando dados e treinando modelos..."):
                        df = gerar_base_sintetica(1000)
                        modelo.treinar_modelos(df)
                        st.success("‚úÖ Modelos treinados com sucesso!")
                        st.experimental_rerun()
                except Exception as e:
                    st.error(f"‚ùå Erro durante o treinamento: {str(e)}")
        else:
            modelo.interface_predicao()

if __name__ == "__main__":
    # Criar diret√≥rio de modelos se n√£o existir
    os.makedirs('modelos', exist_ok=True)
    main()